#+TITLE: Basic configuration settings
#+STARTUP: showall

* Personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Dimiter Naydenov"
        user-mail-address "dimiter.naydenov@canonical.com")
#+END_SRC

* Load initial modules
#+BEGIN_SRC emacs-lisp
  ; Does not work yet
  ;(starter-kit-load "g-client")
  ; Needs extra config
  ;(starter-kit-load "gnus")
  (starter-kit-load "python")
  (starter-kit-load "js")
  (starter-kit-load "misc-recommended")
  (starter-kit-load "org")
#+END_SRC

* Emacs & Org Customizations
** Import shell environment variables
#+BEGIN_SRC emacs-lisp
  ;; exec-path-from-shell is installed via ELPA
  (require 'exec-path-from-shell)
  (exec-path-from-shell-initialize)
  
  ;; GOPATH and GOROOT are need to be set so various tools like godef
  ;; will work. The same is true for PYTHONPATH
  (exec-path-from-shell-copy-env "PYTHONPATH")
  (exec-path-from-shell-copy-env "GOPATH")
  (exec-path-from-shell-copy-env "GOROOT")
  ;; Inheriad TERM rather than using the default "dumb".
  (exec-path-from-shell-copy-env "TERM")
  
  ;; CDPATH including $GOPATH/src makes it easy to do e.g. cd
  ;; github.com/juju/juju/ directly.
  (exec-path-from-shell-copy-env "CDPATH")
#+END_SRC 

** Color theme
#+BEGIN_SRC emacs-lisp
  ;; Load color theme solarized-dark
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/solarized")
  ;;(add-hook 'after-init-hook '(lambda() (load-theme 'solarized-dark t t))
#+END_SRC

** Enable syntax highlighting in Org source blocks by default
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

** Additional registers for common files
#+BEGIN_SRC emacs-lisp
  (set-register ?c '(file . "~/.emacs.d/dimitern/config.org"))
  (set-register ?j '(file . "~/.juju/environments.yaml"))
  (set-register ?b '(file . "~/.bashrc"))
#+END_SRC
   
** Globally enable line numbers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
#+END_SRC

** General improvements
#+BEGIN_SRC emacs-lisp
  ;; Indentation - 4 spaces per tab, use spaces by default, RET indents
  (setq tab-width 4)
  (setq indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)
  (global-set-key (kbd "RET") 'newline-and-indent)
  
  ;; Delete selection on keypress, select with C-SPC (not shift+arrows),
  ;; always show selection
  (setq highlight-nonselected-windows t)
  (setq delete-selection-mode t)
  (setq shift-select-mode nil)
  
  ;; Toggle menu with F1, toolbar with C-F1, scrollbar with C-F2.
  (global-set-key [f1] 'menu-bar-mode)
  (global-set-key [C-f1] 'tool-bar-mode)
  (global-set-key [C-f2] 'scroll-bar-mode)
  ;; Toggle Speedbar with F2
  (global-set-key [f2] 'speedbar)
  
  ;; More convenient bindings for killing buffers
  ;; C-x k   = kill-buffer (non-interactive, only if changed - most commonly used)
  ;; C-c k   = ido-kill-buffer (interactively)
  ;; C-x C-k = kill-some-buffers (interactively, asking for each buffer)
  (global-set-key (kbd "C-x C-k") 'kill-some-buffers)
  (global-set-key (kbd "C-x k") (lambda()(interactive)(kill-buffer nil)))
  (global-set-key (kbd "C-c k") 'ido-kill-buffer)
  
  ;; ERC 5.3 + extras (from source)
  (add-to-list 'load-path "~/.emacs.d/src/erc-5.3-extras")
  (require 'erc-nicklist)
  ;; ERC global binding: C-x C-M-e
  (global-set-key (kbd "C-x C-M-e") 'erc)
  
  ;; Disable menu, toolbar and scroll bar by default.
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  
  ;; Enable Speedbar by default
  (speedbar)
  
  ;; Python - autopep8 on save; M-. = info-lookup-symbol
  (add-to-list 'load-path "~/.emacs.d/dimitern/python-info")
  (require 'pydoc-info)
  (add-hook 'python-mode-hook (lambda ()
    (local-set-key (kbd "M-.") 'info-lookup-symbol)
  ))
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
  
  ;; Visible whitespace
  (require 'whitespace)
  (setq show-trailing-whitespace t)
  (setq whitespace-style (quote (face tabs spaces trailing space-before-tab empty space-after-tab)))
  
  ;; Colum numbers, size, and matching parens - all visible
  (setq column-number-mode t)
  (setq size-indication-mode t)
  (require 'paren)
  (show-paren-mode t)
  
  ;; No double space at end of sentences; newline at EOF
  (setq sentence-end-double-space nil)
  (setq require-final-newline t)
  
  ;; Highlight searches
  (setq search-highlight t)
  
  ;; Improve smooth scrolling
  (setq redisplay-dont-pause t
    scroll-margin 1
    scroll-step 1
    scroll-conservatively 10000
    scroll-preserve-screen-position 1)
  
  ;; Make window splits more useful:
  ;; C-x 2 - vertical split with current and previous buffers
  ;; C-x 3 - horizontal split with current and previous buffers
  ;; Source: http://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury
  (defun my/vsplit-last-buffer (prefix)
    "Split the window vertically and display the previous buffer."
    (interactive "p")
    (split-window-vertically)
    (other-window 1 nil)
    (if (= prefix 1)
      (switch-to-next-buffer)))
  (defun my/hsplit-last-buffer (prefix)
    "Split the window horizontally and display the previous buffer."
    (interactive "p")
    (split-window-horizontally)
    (other-window 1 nil)
    (if (= prefix 1) (switch-to-next-buffer)))
  (global-set-key (kbd "C-x 2") 'my/vsplit-last-buffer)
  (global-set-key (kbd "C-x 3") 'my/hsplit-last-buffer)
#+END_SRC

** Smart Grep search/replace
#+BEGIN_SRC emacs-lisp
  ;; Very useful for Golang projects - recursive search skipping tests
  (defun trgrep ()
    "Runs `rgrep` with --exclude=*_test.go."
    (interactive)
    (progn
      (grep-compute-defaults)
      (let ((grep-find-ignored-files grep-find-ignored-files))
        (add-to-list 'grep-find-ignored-files "*_test.go")
        (call-interactively 'rgrep))))
  
  (global-set-key (kbd "C-$") 'trgrep) ; search sources only
  (global-set-key (kbd "C-%") 'rgrep) ; search sources and tests
  (global-set-key (kbd "M-#") 'replace-regexp) ; regexp replace in buffer
#+END_SRC

** Go-specific configuration
#+BEGIN_SRC emacs-lisp
  ;; Go-mode (installed via elpa)
  (require 'go-mode-autoloads)
  ; go-mode insists on 8-spaces tab, so reset it back to 4
  (setq-default tab-width 4)
  
  ;; ignore 'go test -c' files
  (push ".test" completion-ignored-extensions)
  ;; run tests with 'go test -v'
  (setq go-test-verbose t)
  
  ;; gofmt on save using goimports
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
  
  ;; golint
  (add-to-list 'load-path "$GOPATH/src/github.com/golang/lint/misc/emacs")
  (require 'golint)
  
  ;; Useful Go key bindings.
  (add-hook 'go-mode-hook (lambda ()
    (local-set-key (kbd "C-c i") 'go-goto-imports)
    (local-set-key (kbd "M-.") 'godef-jump)
    (local-set-key (kbd "C-M-.") 'godef-jump-other-window)
    (local-set-key (kbd "C-c h") (lambda ()
                                   (interactive)
                                   (go-coverage
                                    (if (boundp 'go--coverage-current-file-name)
                                        go--coverage-current-file-name
                                      "cover"))))
    (local-set-key (kbd "C-c d") 'godoc-at-point)
    (local-set-key (kbd "C-c c") 'go-test-current-coverage)
    (local-set-key (kbd "C-c t") 'go-test-current-test)
    (local-set-key (kbd "C-c f") 'go-test-current-file)
    (local-set-key (kbd "C-c p") 'go-test-current-project)
    (local-set-key (kbd "C-c x") 'go-run)
    (local-set-key (kbd "C-c l") 'golint)
  ))
  
  ;; go-eldoc integration
  (require 'go-eldoc)
  (add-hook 'go-mode-hook 'go-eldoc-setup)
  (set-face-attribute 'eldoc-highlight-function-argument nil
                      :underline t :foreground "green"
                      :weight 'bold)
  
  ;; gocode - daemon-based autocompletion
  (add-to-list 'load-path "$GOPATH/src/github.com/nsf/gocode/emacs")
  (require 'auto-complete)
  (require 'auto-complete-config)
  (require 'go-autocomplete)
  (global-set-key (kbd "M-/") 'auto-complete)
  (global-auto-complete-mode t)
      
  ;; disable auto-complete to start automatically as you type; only start
  ;; on M-/
  (setq ac-auto-start nil)
    
  ;; enable auto-complete for all modes by default.
  (defun auto-complete-mode-maybe ()
    "No maybe for you. Only AC!"
    (unless (minibufferp (current-buffer))
      (auto-complete-mode 1)))
    
  ;; force ido not to autocomplete whatever is at point on C-x C-f (very
  ;; annoying!)
  (setq ido-auto-merge-work-directories-length -1)
  (setq ido-use-filename-at-point nil)
  
  ;; goflymake - syntax checking on the fly using flycheck
  (add-to-list 'load-path (concat (getenv "GOPATH") "/src/github.com/dougm/goflymake"))
  (require 'go-flycheck)
  (require 'flycheck)
  (add-hook 'go-mode-hook 'flycheck-mode)
  
  ; change the flycheck default command prefix from C-c ! to C-c C-1
  (define-key flycheck-mode-map flycheck-keymap-prefix nil)
  (setq flycheck-keymap-prefix (kbd "C-c C-1"))
  (define-key flycheck-mode-map flycheck-keymap-prefix flycheck-command-map)
  (setq flycheck-check-syntax-automatically '(save))
  
  ;; go-direx - tree view for go sources (using popwin)
  (require 'direx)
  (require 'go-direx)
  (define-key go-mode-map (kbd "C-c C-t") 'go-direx-pop-to-buffer)
  ; Show on the right using popwin
  (require 'popwin)
  (setq display-buffer-function 'popwin:display-buffer)
  (push '("^\*go-direx:" :regexp t :position right :width 0.4 :dedicated t :stick t)
        popwin:special-display-config)
#+END_SRC

** PHP Specific
#+BEGIN_SRC emacs-lisp
  ;; Enable PHP mode and auto completion.
  (add-hook 'php-mode-hook '(lambda ()
                             (auto-complete-mode t)
                             (require 'ac-php)
                             (setq ac-sources  '(ac-source-php ) )
                             (yas-global-mode 1)
  
                             (define-key php-mode-map  (kbd "C-]") 'ac-php-find-symbol-at-point)   ;goto define
                             (define-key php-mode-map  (kbd "C-t") 'ac-php-location-stack-back   ) ;go back
                             ))
  
#+END_SRC

** Backups & History
#+BEGIN_SRC emacs-lisp
  ;; Use ~/.emacs.d/backups for all backups
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  ;; Disk space is cheap - save lots.
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
  ;; History
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+END_SRC
